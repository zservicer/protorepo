// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.18.1
// source: proto/talk.proto

package talkpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TalkStatus int32

const (
	TalkStatus_TALK_STATUS_UNSPECIFIED TalkStatus = 0
	TalkStatus_TALK_STATUS_OPENED      TalkStatus = 1
	TalkStatus_TALK_STATUS_CLOSED      TalkStatus = 2
)

// Enum value maps for TalkStatus.
var (
	TalkStatus_name = map[int32]string{
		0: "TALK_STATUS_UNSPECIFIED",
		1: "TALK_STATUS_OPENED",
		2: "TALK_STATUS_CLOSED",
	}
	TalkStatus_value = map[string]int32{
		"TALK_STATUS_UNSPECIFIED": 0,
		"TALK_STATUS_OPENED":      1,
		"TALK_STATUS_CLOSED":      2,
	}
)

func (x TalkStatus) Enum() *TalkStatus {
	p := new(TalkStatus)
	*p = x
	return p
}

func (x TalkStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TalkStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_talk_proto_enumTypes[0].Descriptor()
}

func (TalkStatus) Type() protoreflect.EnumType {
	return &file_proto_talk_proto_enumTypes[0]
}

func (x TalkStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TalkStatus.Descriptor instead.
func (TalkStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{0}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{0}
}

type TalkKickOutMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TalkKickOutMessage) Reset() {
	*x = TalkKickOutMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkKickOutMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkKickOutMessage) ProtoMessage() {}

func (x *TalkKickOutMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkKickOutMessage.ProtoReflect.Descriptor instead.
func (*TalkKickOutMessage) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{1}
}

func (x *TalkKickOutMessage) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TalkKickOutMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type QueryTalksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statuses []TalkStatus `protobuf:"varint,1,rep,packed,name=statuses,proto3,enum=TalkStatus" json:"statuses,omitempty"`
}

func (x *QueryTalksRequest) Reset() {
	*x = QueryTalksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTalksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTalksRequest) ProtoMessage() {}

func (x *QueryTalksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTalksRequest.ProtoReflect.Descriptor instead.
func (*QueryTalksRequest) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{2}
}

func (x *QueryTalksRequest) GetStatuses() []TalkStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type TalkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalkId       string     `protobuf:"bytes,1,opt,name=talk_id,json=talkId,proto3" json:"talk_id,omitempty"`
	Status       TalkStatus `protobuf:"varint,2,opt,name=status,proto3,enum=TalkStatus" json:"status,omitempty"`
	Title        string     `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	StartedAt    uint64     `protobuf:"varint,4,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt   uint64     `protobuf:"varint,5,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	CustomerName string     `protobuf:"bytes,6,opt,name=customer_name,json=customerName,proto3" json:"customer_name,omitempty"`
}

func (x *TalkInfo) Reset() {
	*x = TalkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkInfo) ProtoMessage() {}

func (x *TalkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkInfo.ProtoReflect.Descriptor instead.
func (*TalkInfo) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{3}
}

func (x *TalkInfo) GetTalkId() string {
	if x != nil {
		return x.TalkId
	}
	return ""
}

func (x *TalkInfo) GetStatus() TalkStatus {
	if x != nil {
		return x.Status
	}
	return TalkStatus_TALK_STATUS_UNSPECIFIED
}

func (x *TalkInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TalkInfo) GetStartedAt() uint64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *TalkInfo) GetFinishedAt() uint64 {
	if x != nil {
		return x.FinishedAt
	}
	return 0
}

func (x *TalkInfo) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

type QueryTalksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Talks []*TalkInfo `protobuf:"bytes,1,rep,name=talks,proto3" json:"talks,omitempty"`
}

func (x *QueryTalksResponse) Reset() {
	*x = QueryTalksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTalksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTalksResponse) ProtoMessage() {}

func (x *QueryTalksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTalksResponse.ProtoReflect.Descriptor instead.
func (*QueryTalksResponse) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{4}
}

func (x *QueryTalksResponse) GetTalks() []*TalkInfo {
	if x != nil {
		return x.Talks
	}
	return nil
}

type TalkCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	ActId string `protobuf:"bytes,2,opt,name=act_id,json=actId,proto3" json:"act_id,omitempty"`
	BizId string `protobuf:"bytes,3,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"`
}

func (x *TalkCreateRequest) Reset() {
	*x = TalkCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkCreateRequest) ProtoMessage() {}

func (x *TalkCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkCreateRequest.ProtoReflect.Descriptor instead.
func (*TalkCreateRequest) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{5}
}

func (x *TalkCreateRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TalkCreateRequest) GetActId() string {
	if x != nil {
		return x.ActId
	}
	return ""
}

func (x *TalkCreateRequest) GetBizId() string {
	if x != nil {
		return x.BizId
	}
	return ""
}

type TalkOpenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalkId string `protobuf:"bytes,1,opt,name=talk_id,json=talkId,proto3" json:"talk_id,omitempty"`
	ActId  string `protobuf:"bytes,2,opt,name=act_id,json=actId,proto3" json:"act_id,omitempty"`
	BizId  string `protobuf:"bytes,3,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"`
}

func (x *TalkOpenRequest) Reset() {
	*x = TalkOpenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkOpenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkOpenRequest) ProtoMessage() {}

func (x *TalkOpenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkOpenRequest.ProtoReflect.Descriptor instead.
func (*TalkOpenRequest) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{6}
}

func (x *TalkOpenRequest) GetTalkId() string {
	if x != nil {
		return x.TalkId
	}
	return ""
}

func (x *TalkOpenRequest) GetActId() string {
	if x != nil {
		return x.ActId
	}
	return ""
}

func (x *TalkOpenRequest) GetBizId() string {
	if x != nil {
		return x.BizId
	}
	return ""
}

type TalkMessageW struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId uint64 `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	// Types that are assignable to Message:
	//	*TalkMessageW_Text
	//	*TalkMessageW_Image
	Message isTalkMessageW_Message `protobuf_oneof:"Message"`
}

func (x *TalkMessageW) Reset() {
	*x = TalkMessageW{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkMessageW) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkMessageW) ProtoMessage() {}

func (x *TalkMessageW) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkMessageW.ProtoReflect.Descriptor instead.
func (*TalkMessageW) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{7}
}

func (x *TalkMessageW) GetSeqId() uint64 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (m *TalkMessageW) GetMessage() isTalkMessageW_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *TalkMessageW) GetText() string {
	if x, ok := x.GetMessage().(*TalkMessageW_Text); ok {
		return x.Text
	}
	return ""
}

func (x *TalkMessageW) GetImage() []byte {
	if x, ok := x.GetMessage().(*TalkMessageW_Image); ok {
		return x.Image
	}
	return nil
}

type isTalkMessageW_Message interface {
	isTalkMessageW_Message()
}

type TalkMessageW_Text struct {
	Text string `protobuf:"bytes,20,opt,name=text,proto3,oneof"`
}

type TalkMessageW_Image struct {
	Image []byte `protobuf:"bytes,21,opt,name=image,proto3,oneof"`
}

func (*TalkMessageW_Text) isTalkMessageW_Message() {}

func (*TalkMessageW_Image) isTalkMessageW_Message() {}

type TalkMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	At              uint64 `protobuf:"varint,1,opt,name=at,proto3" json:"at,omitempty"`
	CustomerMessage bool   `protobuf:"varint,2,opt,name=customer_message,json=customerMessage,proto3" json:"customer_message,omitempty"`
	User            string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// Types that are assignable to Message:
	//	*TalkMessage_Text
	//	*TalkMessage_Image
	Message isTalkMessage_Message `protobuf_oneof:"Message"`
}

func (x *TalkMessage) Reset() {
	*x = TalkMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkMessage) ProtoMessage() {}

func (x *TalkMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkMessage.ProtoReflect.Descriptor instead.
func (*TalkMessage) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{8}
}

func (x *TalkMessage) GetAt() uint64 {
	if x != nil {
		return x.At
	}
	return 0
}

func (x *TalkMessage) GetCustomerMessage() bool {
	if x != nil {
		return x.CustomerMessage
	}
	return false
}

func (x *TalkMessage) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (m *TalkMessage) GetMessage() isTalkMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *TalkMessage) GetText() string {
	if x, ok := x.GetMessage().(*TalkMessage_Text); ok {
		return x.Text
	}
	return ""
}

func (x *TalkMessage) GetImage() []byte {
	if x, ok := x.GetMessage().(*TalkMessage_Image); ok {
		return x.Image
	}
	return nil
}

type isTalkMessage_Message interface {
	isTalkMessage_Message()
}

type TalkMessage_Text struct {
	Text string `protobuf:"bytes,20,opt,name=text,proto3,oneof"`
}

type TalkMessage_Image struct {
	Image []byte `protobuf:"bytes,21,opt,name=image,proto3,oneof"`
}

func (*TalkMessage_Text) isTalkMessage_Message() {}

func (*TalkMessage_Image) isTalkMessage_Message() {}

type TalkClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TalkClose) Reset() {
	*x = TalkClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkClose) ProtoMessage() {}

func (x *TalkClose) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkClose.ProtoReflect.Descriptor instead.
func (*TalkClose) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{9}
}

type TalkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Talk:
	//	*TalkRequest_Create
	//	*TalkRequest_Open
	//	*TalkRequest_Message
	//	*TalkRequest_Close
	Talk isTalkRequest_Talk `protobuf_oneof:"Talk"`
}

func (x *TalkRequest) Reset() {
	*x = TalkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkRequest) ProtoMessage() {}

func (x *TalkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkRequest.ProtoReflect.Descriptor instead.
func (*TalkRequest) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{10}
}

func (m *TalkRequest) GetTalk() isTalkRequest_Talk {
	if m != nil {
		return m.Talk
	}
	return nil
}

func (x *TalkRequest) GetCreate() *TalkCreateRequest {
	if x, ok := x.GetTalk().(*TalkRequest_Create); ok {
		return x.Create
	}
	return nil
}

func (x *TalkRequest) GetOpen() *TalkOpenRequest {
	if x, ok := x.GetTalk().(*TalkRequest_Open); ok {
		return x.Open
	}
	return nil
}

func (x *TalkRequest) GetMessage() *TalkMessageW {
	if x, ok := x.GetTalk().(*TalkRequest_Message); ok {
		return x.Message
	}
	return nil
}

func (x *TalkRequest) GetClose() *TalkClose {
	if x, ok := x.GetTalk().(*TalkRequest_Close); ok {
		return x.Close
	}
	return nil
}

type isTalkRequest_Talk interface {
	isTalkRequest_Talk()
}

type TalkRequest_Create struct {
	Create *TalkCreateRequest `protobuf:"bytes,1,opt,name=create,proto3,oneof"`
}

type TalkRequest_Open struct {
	Open *TalkOpenRequest `protobuf:"bytes,2,opt,name=open,proto3,oneof"`
}

type TalkRequest_Message struct {
	Message *TalkMessageW `protobuf:"bytes,3,opt,name=message,proto3,oneof"`
}

type TalkRequest_Close struct {
	Close *TalkClose `protobuf:"bytes,4,opt,name=close,proto3,oneof"`
}

func (*TalkRequest_Create) isTalkRequest_Talk() {}

func (*TalkRequest_Open) isTalkRequest_Talk() {}

func (*TalkRequest_Message) isTalkRequest_Talk() {}

func (*TalkRequest_Close) isTalkRequest_Talk() {}

type TalkMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalkId   string         `protobuf:"bytes,1,opt,name=talk_id,json=talkId,proto3" json:"talk_id,omitempty"`
	Messages []*TalkMessage `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *TalkMessages) Reset() {
	*x = TalkMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkMessages) ProtoMessage() {}

func (x *TalkMessages) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkMessages.ProtoReflect.Descriptor instead.
func (*TalkMessages) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{11}
}

func (x *TalkMessages) GetTalkId() string {
	if x != nil {
		return x.TalkId
	}
	return ""
}

func (x *TalkMessages) GetMessages() []*TalkMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type TalkMessageConfirmed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId uint64 `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	At    uint64 `protobuf:"varint,2,opt,name=at,proto3" json:"at,omitempty"`
}

func (x *TalkMessageConfirmed) Reset() {
	*x = TalkMessageConfirmed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkMessageConfirmed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkMessageConfirmed) ProtoMessage() {}

func (x *TalkMessageConfirmed) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkMessageConfirmed.ProtoReflect.Descriptor instead.
func (*TalkMessageConfirmed) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{12}
}

func (x *TalkMessageConfirmed) GetSeqId() uint64 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *TalkMessageConfirmed) GetAt() uint64 {
	if x != nil {
		return x.At
	}
	return 0
}

type TalkNotifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *TalkNotifyResponse) Reset() {
	*x = TalkNotifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkNotifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkNotifyResponse) ProtoMessage() {}

func (x *TalkNotifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkNotifyResponse.ProtoReflect.Descriptor instead.
func (*TalkNotifyResponse) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{13}
}

func (x *TalkNotifyResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type TalkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Talk:
	//	*TalkResponse_KickOut
	//	*TalkResponse_Messages
	//	*TalkResponse_Message
	//	*TalkResponse_MessageConfirmed
	//	*TalkResponse_Close
	//	*TalkResponse_Notify
	Talk isTalkResponse_Talk `protobuf_oneof:"Talk"`
}

func (x *TalkResponse) Reset() {
	*x = TalkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkResponse) ProtoMessage() {}

func (x *TalkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkResponse.ProtoReflect.Descriptor instead.
func (*TalkResponse) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{14}
}

func (m *TalkResponse) GetTalk() isTalkResponse_Talk {
	if m != nil {
		return m.Talk
	}
	return nil
}

func (x *TalkResponse) GetKickOut() *TalkKickOutMessage {
	if x, ok := x.GetTalk().(*TalkResponse_KickOut); ok {
		return x.KickOut
	}
	return nil
}

func (x *TalkResponse) GetMessages() *TalkMessages {
	if x, ok := x.GetTalk().(*TalkResponse_Messages); ok {
		return x.Messages
	}
	return nil
}

func (x *TalkResponse) GetMessage() *TalkMessage {
	if x, ok := x.GetTalk().(*TalkResponse_Message); ok {
		return x.Message
	}
	return nil
}

func (x *TalkResponse) GetMessageConfirmed() *TalkMessageConfirmed {
	if x, ok := x.GetTalk().(*TalkResponse_MessageConfirmed); ok {
		return x.MessageConfirmed
	}
	return nil
}

func (x *TalkResponse) GetClose() *TalkClose {
	if x, ok := x.GetTalk().(*TalkResponse_Close); ok {
		return x.Close
	}
	return nil
}

func (x *TalkResponse) GetNotify() *TalkNotifyResponse {
	if x, ok := x.GetTalk().(*TalkResponse_Notify); ok {
		return x.Notify
	}
	return nil
}

type isTalkResponse_Talk interface {
	isTalkResponse_Talk()
}

type TalkResponse_KickOut struct {
	KickOut *TalkKickOutMessage `protobuf:"bytes,1,opt,name=kick_out,json=kickOut,proto3,oneof"`
}

type TalkResponse_Messages struct {
	Messages *TalkMessages `protobuf:"bytes,2,opt,name=messages,proto3,oneof"`
}

type TalkResponse_Message struct {
	Message *TalkMessage `protobuf:"bytes,3,opt,name=message,proto3,oneof"`
}

type TalkResponse_MessageConfirmed struct {
	MessageConfirmed *TalkMessageConfirmed `protobuf:"bytes,4,opt,name=message_confirmed,json=messageConfirmed,proto3,oneof"`
}

type TalkResponse_Close struct {
	Close *TalkClose `protobuf:"bytes,5,opt,name=close,proto3,oneof"`
}

type TalkResponse_Notify struct {
	Notify *TalkNotifyResponse `protobuf:"bytes,6,opt,name=notify,proto3,oneof"`
}

func (*TalkResponse_KickOut) isTalkResponse_Talk() {}

func (*TalkResponse_Messages) isTalkResponse_Talk() {}

func (*TalkResponse_Message) isTalkResponse_Talk() {}

func (*TalkResponse_MessageConfirmed) isTalkResponse_Talk() {}

func (*TalkResponse_Close) isTalkResponse_Talk() {}

func (*TalkResponse_Notify) isTalkResponse_Talk() {}

type ServiceQueryAttachedTalksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServiceQueryAttachedTalksRequest) Reset() {
	*x = ServiceQueryAttachedTalksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceQueryAttachedTalksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceQueryAttachedTalksRequest) ProtoMessage() {}

func (x *ServiceQueryAttachedTalksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceQueryAttachedTalksRequest.ProtoReflect.Descriptor instead.
func (*ServiceQueryAttachedTalksRequest) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{15}
}

type ServiceQueryPendingTalksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServiceQueryPendingTalksRequest) Reset() {
	*x = ServiceQueryPendingTalksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceQueryPendingTalksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceQueryPendingTalksRequest) ProtoMessage() {}

func (x *ServiceQueryPendingTalksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceQueryPendingTalksRequest.ProtoReflect.Descriptor instead.
func (*ServiceQueryPendingTalksRequest) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{16}
}

type ServiceReloadTalkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalkId string `protobuf:"bytes,1,opt,name=talk_id,json=talkId,proto3" json:"talk_id,omitempty"`
}

func (x *ServiceReloadTalkRequest) Reset() {
	*x = ServiceReloadTalkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceReloadTalkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceReloadTalkRequest) ProtoMessage() {}

func (x *ServiceReloadTalkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceReloadTalkRequest.ProtoReflect.Descriptor instead.
func (*ServiceReloadTalkRequest) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{17}
}

func (x *ServiceReloadTalkRequest) GetTalkId() string {
	if x != nil {
		return x.TalkId
	}
	return ""
}

type ServicePostMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalkId  string        `protobuf:"bytes,1,opt,name=talk_id,json=talkId,proto3" json:"talk_id,omitempty"`
	Message *TalkMessageW `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ServicePostMessage) Reset() {
	*x = ServicePostMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicePostMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicePostMessage) ProtoMessage() {}

func (x *ServicePostMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicePostMessage.ProtoReflect.Descriptor instead.
func (*ServicePostMessage) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{18}
}

func (x *ServicePostMessage) GetTalkId() string {
	if x != nil {
		return x.TalkId
	}
	return ""
}

func (x *ServicePostMessage) GetMessage() *TalkMessageW {
	if x != nil {
		return x.Message
	}
	return nil
}

type ServiceAttachRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalkId string `protobuf:"bytes,1,opt,name=talk_id,json=talkId,proto3" json:"talk_id,omitempty"`
}

func (x *ServiceAttachRequest) Reset() {
	*x = ServiceAttachRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceAttachRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAttachRequest) ProtoMessage() {}

func (x *ServiceAttachRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAttachRequest.ProtoReflect.Descriptor instead.
func (*ServiceAttachRequest) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{19}
}

func (x *ServiceAttachRequest) GetTalkId() string {
	if x != nil {
		return x.TalkId
	}
	return ""
}

type ServiceDetachRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalkId string `protobuf:"bytes,1,opt,name=talk_id,json=talkId,proto3" json:"talk_id,omitempty"`
}

func (x *ServiceDetachRequest) Reset() {
	*x = ServiceDetachRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceDetachRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceDetachRequest) ProtoMessage() {}

func (x *ServiceDetachRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceDetachRequest.ProtoReflect.Descriptor instead.
func (*ServiceDetachRequest) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{20}
}

func (x *ServiceDetachRequest) GetTalkId() string {
	if x != nil {
		return x.TalkId
	}
	return ""
}

type ServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*ServiceRequest_AttachedTalks
	//	*ServiceRequest_PendingTalks
	//	*ServiceRequest_Reload
	//	*ServiceRequest_Message
	//	*ServiceRequest_Attach
	//	*ServiceRequest_Detach
	Request isServiceRequest_Request `protobuf_oneof:"Request"`
}

func (x *ServiceRequest) Reset() {
	*x = ServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceRequest) ProtoMessage() {}

func (x *ServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceRequest.ProtoReflect.Descriptor instead.
func (*ServiceRequest) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{21}
}

func (m *ServiceRequest) GetRequest() isServiceRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *ServiceRequest) GetAttachedTalks() *ServiceQueryAttachedTalksRequest {
	if x, ok := x.GetRequest().(*ServiceRequest_AttachedTalks); ok {
		return x.AttachedTalks
	}
	return nil
}

func (x *ServiceRequest) GetPendingTalks() *ServiceQueryPendingTalksRequest {
	if x, ok := x.GetRequest().(*ServiceRequest_PendingTalks); ok {
		return x.PendingTalks
	}
	return nil
}

func (x *ServiceRequest) GetReload() *ServiceReloadTalkRequest {
	if x, ok := x.GetRequest().(*ServiceRequest_Reload); ok {
		return x.Reload
	}
	return nil
}

func (x *ServiceRequest) GetMessage() *ServicePostMessage {
	if x, ok := x.GetRequest().(*ServiceRequest_Message); ok {
		return x.Message
	}
	return nil
}

func (x *ServiceRequest) GetAttach() *ServiceAttachRequest {
	if x, ok := x.GetRequest().(*ServiceRequest_Attach); ok {
		return x.Attach
	}
	return nil
}

func (x *ServiceRequest) GetDetach() *ServiceDetachRequest {
	if x, ok := x.GetRequest().(*ServiceRequest_Detach); ok {
		return x.Detach
	}
	return nil
}

type isServiceRequest_Request interface {
	isServiceRequest_Request()
}

type ServiceRequest_AttachedTalks struct {
	AttachedTalks *ServiceQueryAttachedTalksRequest `protobuf:"bytes,1,opt,name=attached_talks,json=attachedTalks,proto3,oneof"`
}

type ServiceRequest_PendingTalks struct {
	PendingTalks *ServiceQueryPendingTalksRequest `protobuf:"bytes,2,opt,name=pending_talks,json=pendingTalks,proto3,oneof"`
}

type ServiceRequest_Reload struct {
	Reload *ServiceReloadTalkRequest `protobuf:"bytes,3,opt,name=reload,proto3,oneof"`
}

type ServiceRequest_Message struct {
	Message *ServicePostMessage `protobuf:"bytes,4,opt,name=message,proto3,oneof"`
}

type ServiceRequest_Attach struct {
	Attach *ServiceAttachRequest `protobuf:"bytes,5,opt,name=attach,proto3,oneof"`
}

type ServiceRequest_Detach struct {
	Detach *ServiceDetachRequest `protobuf:"bytes,6,opt,name=detach,proto3,oneof"`
}

func (*ServiceRequest_AttachedTalks) isServiceRequest_Request() {}

func (*ServiceRequest_PendingTalks) isServiceRequest_Request() {}

func (*ServiceRequest_Reload) isServiceRequest_Request() {}

func (*ServiceRequest_Message) isServiceRequest_Request() {}

func (*ServiceRequest_Attach) isServiceRequest_Request() {}

func (*ServiceRequest_Detach) isServiceRequest_Request() {}

type ServicePendingTalksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Talks []*TalkInfo `protobuf:"bytes,2,rep,name=talks,proto3" json:"talks,omitempty"`
}

func (x *ServicePendingTalksResponse) Reset() {
	*x = ServicePendingTalksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicePendingTalksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicePendingTalksResponse) ProtoMessage() {}

func (x *ServicePendingTalksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicePendingTalksResponse.ProtoReflect.Descriptor instead.
func (*ServicePendingTalksResponse) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{22}
}

func (x *ServicePendingTalksResponse) GetTalks() []*TalkInfo {
	if x != nil {
		return x.Talks
	}
	return nil
}

type ServiceTalkInfoAndMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalkInfo *TalkInfo      `protobuf:"bytes,1,opt,name=talk_info,json=talkInfo,proto3" json:"talk_info,omitempty"`
	Messages []*TalkMessage `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *ServiceTalkInfoAndMessages) Reset() {
	*x = ServiceTalkInfoAndMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceTalkInfoAndMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceTalkInfoAndMessages) ProtoMessage() {}

func (x *ServiceTalkInfoAndMessages) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceTalkInfoAndMessages.ProtoReflect.Descriptor instead.
func (*ServiceTalkInfoAndMessages) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{23}
}

func (x *ServiceTalkInfoAndMessages) GetTalkInfo() *TalkInfo {
	if x != nil {
		return x.TalkInfo
	}
	return nil
}

func (x *ServiceTalkInfoAndMessages) GetMessages() []*TalkMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type ServiceAttachedTalksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Talks []*ServiceTalkInfoAndMessages `protobuf:"bytes,2,rep,name=talks,proto3" json:"talks,omitempty"`
}

func (x *ServiceAttachedTalksResponse) Reset() {
	*x = ServiceAttachedTalksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceAttachedTalksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAttachedTalksResponse) ProtoMessage() {}

func (x *ServiceAttachedTalksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAttachedTalksResponse.ProtoReflect.Descriptor instead.
func (*ServiceAttachedTalksResponse) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{24}
}

func (x *ServiceAttachedTalksResponse) GetTalks() []*ServiceTalkInfoAndMessages {
	if x != nil {
		return x.Talks
	}
	return nil
}

type ServiceAttachTalkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Talk              *TalkInfo `protobuf:"bytes,1,opt,name=talk,proto3" json:"talk,omitempty"`
	AttachedServiceId uint64    `protobuf:"varint,2,opt,name=attached_service_id,json=attachedServiceId,proto3" json:"attached_service_id,omitempty"` // 会话附加到的客服ID，如果非0且值等于当前客户ID，代表附加到了本客服
}

func (x *ServiceAttachTalkResponse) Reset() {
	*x = ServiceAttachTalkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceAttachTalkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAttachTalkResponse) ProtoMessage() {}

func (x *ServiceAttachTalkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAttachTalkResponse.ProtoReflect.Descriptor instead.
func (*ServiceAttachTalkResponse) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{25}
}

func (x *ServiceAttachTalkResponse) GetTalk() *TalkInfo {
	if x != nil {
		return x.Talk
	}
	return nil
}

func (x *ServiceAttachTalkResponse) GetAttachedServiceId() uint64 {
	if x != nil {
		return x.AttachedServiceId
	}
	return 0
}

type ServiceDetachTalkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Talk              *TalkInfo `protobuf:"bytes,1,opt,name=talk,proto3" json:"talk,omitempty"`
	DetachedServiceId uint64    `protobuf:"varint,2,opt,name=detached_service_id,json=detachedServiceId,proto3" json:"detached_service_id,omitempty"` // 被剥夺会话的客服ID，如果非0且值等于当前客户ID，代表本客服被剥夺此会话
}

func (x *ServiceDetachTalkResponse) Reset() {
	*x = ServiceDetachTalkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceDetachTalkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceDetachTalkResponse) ProtoMessage() {}

func (x *ServiceDetachTalkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceDetachTalkResponse.ProtoReflect.Descriptor instead.
func (*ServiceDetachTalkResponse) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{26}
}

func (x *ServiceDetachTalkResponse) GetTalk() *TalkInfo {
	if x != nil {
		return x.Talk
	}
	return nil
}

func (x *ServiceDetachTalkResponse) GetDetachedServiceId() uint64 {
	if x != nil {
		return x.DetachedServiceId
	}
	return 0
}

type ServiceTalkReloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Talk *ServiceTalkInfoAndMessages `protobuf:"bytes,1,opt,name=talk,proto3" json:"talk,omitempty"`
}

func (x *ServiceTalkReloadResponse) Reset() {
	*x = ServiceTalkReloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceTalkReloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceTalkReloadResponse) ProtoMessage() {}

func (x *ServiceTalkReloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceTalkReloadResponse.ProtoReflect.Descriptor instead.
func (*ServiceTalkReloadResponse) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{27}
}

func (x *ServiceTalkReloadResponse) GetTalk() *ServiceTalkInfoAndMessages {
	if x != nil {
		return x.Talk
	}
	return nil
}

type ServiceTalkMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalkId  string       `protobuf:"bytes,1,opt,name=talk_id,json=talkId,proto3" json:"talk_id,omitempty"`
	Message *TalkMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ServiceTalkMessageResponse) Reset() {
	*x = ServiceTalkMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceTalkMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceTalkMessageResponse) ProtoMessage() {}

func (x *ServiceTalkMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceTalkMessageResponse.ProtoReflect.Descriptor instead.
func (*ServiceTalkMessageResponse) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{28}
}

func (x *ServiceTalkMessageResponse) GetTalkId() string {
	if x != nil {
		return x.TalkId
	}
	return ""
}

func (x *ServiceTalkMessageResponse) GetMessage() *TalkMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type ServiceTalkNotifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ServiceTalkNotifyResponse) Reset() {
	*x = ServiceTalkNotifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceTalkNotifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceTalkNotifyResponse) ProtoMessage() {}

func (x *ServiceTalkNotifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceTalkNotifyResponse.ProtoReflect.Descriptor instead.
func (*ServiceTalkNotifyResponse) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{29}
}

func (x *ServiceTalkNotifyResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ServiceMessageConfirmed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId uint64 `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	At    uint64 `protobuf:"varint,2,opt,name=at,proto3" json:"at,omitempty"`
}

func (x *ServiceMessageConfirmed) Reset() {
	*x = ServiceMessageConfirmed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceMessageConfirmed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceMessageConfirmed) ProtoMessage() {}

func (x *ServiceMessageConfirmed) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceMessageConfirmed.ProtoReflect.Descriptor instead.
func (*ServiceMessageConfirmed) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{30}
}

func (x *ServiceMessageConfirmed) GetSeqId() uint64 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *ServiceMessageConfirmed) GetAt() uint64 {
	if x != nil {
		return x.At
	}
	return 0
}

type ServiceTalkClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalkId string `protobuf:"bytes,1,opt,name=talk_id,json=talkId,proto3" json:"talk_id,omitempty"`
}

func (x *ServiceTalkClose) Reset() {
	*x = ServiceTalkClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceTalkClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceTalkClose) ProtoMessage() {}

func (x *ServiceTalkClose) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceTalkClose.ProtoReflect.Descriptor instead.
func (*ServiceTalkClose) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{31}
}

func (x *ServiceTalkClose) GetTalkId() string {
	if x != nil {
		return x.TalkId
	}
	return ""
}

type ServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*ServiceResponse_KickOut
	//	*ServiceResponse_PendingTalks
	//	*ServiceResponse_Talks
	//	*ServiceResponse_Attach
	//	*ServiceResponse_Detach
	//	*ServiceResponse_Reload
	//	*ServiceResponse_Message
	//	*ServiceResponse_Notify
	//	*ServiceResponse_MessageConfirmed
	//	*ServiceResponse_Close
	Response isServiceResponse_Response `protobuf_oneof:"Response"`
}

func (x *ServiceResponse) Reset() {
	*x = ServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceResponse) ProtoMessage() {}

func (x *ServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceResponse.ProtoReflect.Descriptor instead.
func (*ServiceResponse) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{32}
}

func (m *ServiceResponse) GetResponse() isServiceResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ServiceResponse) GetKickOut() *TalkKickOutMessage {
	if x, ok := x.GetResponse().(*ServiceResponse_KickOut); ok {
		return x.KickOut
	}
	return nil
}

func (x *ServiceResponse) GetPendingTalks() *ServicePendingTalksResponse {
	if x, ok := x.GetResponse().(*ServiceResponse_PendingTalks); ok {
		return x.PendingTalks
	}
	return nil
}

func (x *ServiceResponse) GetTalks() *ServiceAttachedTalksResponse {
	if x, ok := x.GetResponse().(*ServiceResponse_Talks); ok {
		return x.Talks
	}
	return nil
}

func (x *ServiceResponse) GetAttach() *ServiceAttachTalkResponse {
	if x, ok := x.GetResponse().(*ServiceResponse_Attach); ok {
		return x.Attach
	}
	return nil
}

func (x *ServiceResponse) GetDetach() *ServiceDetachTalkResponse {
	if x, ok := x.GetResponse().(*ServiceResponse_Detach); ok {
		return x.Detach
	}
	return nil
}

func (x *ServiceResponse) GetReload() *ServiceTalkReloadResponse {
	if x, ok := x.GetResponse().(*ServiceResponse_Reload); ok {
		return x.Reload
	}
	return nil
}

func (x *ServiceResponse) GetMessage() *ServiceTalkMessageResponse {
	if x, ok := x.GetResponse().(*ServiceResponse_Message); ok {
		return x.Message
	}
	return nil
}

func (x *ServiceResponse) GetNotify() *ServiceTalkNotifyResponse {
	if x, ok := x.GetResponse().(*ServiceResponse_Notify); ok {
		return x.Notify
	}
	return nil
}

func (x *ServiceResponse) GetMessageConfirmed() *ServiceMessageConfirmed {
	if x, ok := x.GetResponse().(*ServiceResponse_MessageConfirmed); ok {
		return x.MessageConfirmed
	}
	return nil
}

func (x *ServiceResponse) GetClose() *ServiceTalkClose {
	if x, ok := x.GetResponse().(*ServiceResponse_Close); ok {
		return x.Close
	}
	return nil
}

type isServiceResponse_Response interface {
	isServiceResponse_Response()
}

type ServiceResponse_KickOut struct {
	KickOut *TalkKickOutMessage `protobuf:"bytes,1,opt,name=kick_out,json=kickOut,proto3,oneof"` // 客服被踢出登录
}

type ServiceResponse_PendingTalks struct {
	PendingTalks *ServicePendingTalksResponse `protobuf:"bytes,2,opt,name=pending_talks,json=pendingTalks,proto3,oneof"` // 刷新未分配会话列表
}

type ServiceResponse_Talks struct {
	Talks *ServiceAttachedTalksResponse `protobuf:"bytes,3,opt,name=talks,proto3,oneof"` // 刷新客服处理的所有会话
}

type ServiceResponse_Attach struct {
	Attach *ServiceAttachTalkResponse `protobuf:"bytes,4,opt,name=attach,proto3,oneof"` // 会话变为被分配状态
}

type ServiceResponse_Detach struct {
	Detach *ServiceDetachTalkResponse `protobuf:"bytes,5,opt,name=detach,proto3,oneof"` // 会话变为未分配状态
}

type ServiceResponse_Reload struct {
	Reload *ServiceTalkReloadResponse `protobuf:"bytes,6,opt,name=reload,proto3,oneof"` // 会话加载回应
}

type ServiceResponse_Message struct {
	Message *ServiceTalkMessageResponse `protobuf:"bytes,7,opt,name=message,proto3,oneof"` // 会话中新增消息
}

type ServiceResponse_Notify struct {
	Notify *ServiceTalkNotifyResponse `protobuf:"bytes,8,opt,name=notify,proto3,oneof"` // notify
}

type ServiceResponse_MessageConfirmed struct {
	MessageConfirmed *ServiceMessageConfirmed `protobuf:"bytes,9,opt,name=message_confirmed,json=messageConfirmed,proto3,oneof"` // 会话中新增消息回应
}

type ServiceResponse_Close struct {
	Close *ServiceTalkClose `protobuf:"bytes,10,opt,name=close,proto3,oneof"` // 会话被关闭
}

func (*ServiceResponse_KickOut) isServiceResponse_Response() {}

func (*ServiceResponse_PendingTalks) isServiceResponse_Response() {}

func (*ServiceResponse_Talks) isServiceResponse_Response() {}

func (*ServiceResponse_Attach) isServiceResponse_Response() {}

func (*ServiceResponse_Detach) isServiceResponse_Response() {}

func (*ServiceResponse_Reload) isServiceResponse_Response() {}

func (*ServiceResponse_Message) isServiceResponse_Response() {}

func (*ServiceResponse_Notify) isServiceResponse_Response() {}

func (*ServiceResponse_MessageConfirmed) isServiceResponse_Response() {}

func (*ServiceResponse_Close) isServiceResponse_Response() {}

type CheckTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckTokenRequest) Reset() {
	*x = CheckTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenRequest) ProtoMessage() {}

func (x *CheckTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenRequest.ProtoReflect.Descriptor instead.
func (*CheckTokenRequest) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{33}
}

type CheckTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid    bool   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	NewToken string `protobuf:"bytes,3,opt,name=new_token,json=newToken,proto3" json:"new_token,omitempty"`
}

func (x *CheckTokenResponse) Reset() {
	*x = CheckTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenResponse) ProtoMessage() {}

func (x *CheckTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenResponse.ProtoReflect.Descriptor instead.
func (*CheckTokenResponse) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{34}
}

func (x *CheckTokenResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *CheckTokenResponse) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CheckTokenResponse) GetNewToken() string {
	if x != nil {
		return x.NewToken
	}
	return ""
}

type CreateTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *CreateTokenRequest) Reset() {
	*x = CreateTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenRequest) ProtoMessage() {}

func (x *CreateTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenRequest.ProtoReflect.Descriptor instead.
func (*CreateTokenRequest) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{35}
}

func (x *CreateTokenRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type CreateTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *CreateTokenResponse) Reset() {
	*x = CreateTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenResponse) ProtoMessage() {}

func (x *CreateTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenResponse.ProtoReflect.Descriptor instead.
func (*CreateTokenResponse) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{36}
}

func (x *CreateTokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CreateTokenResponse) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{37}
}

func (x *RegisterRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *RegisterRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type RegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{38}
}

func (x *RegisterResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RegisterResponse) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{39}
}

func (x *LoginRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *LoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_talk_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_talk_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_proto_talk_proto_rawDescGZIP(), []int{40}
}

func (x *LoginResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginResponse) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

var File_proto_talk_proto protoreflect.FileDescriptor

var file_proto_talk_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x42, 0x0a, 0x12, 0x54,
	0x61, 0x6c, 0x6b, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x3c, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22, 0xc3, 0x01,
	0x0a, 0x08, 0x54, 0x61, 0x6c, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x6c, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x6c,
	0x6b, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x6c, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x74, 0x61, 0x6c,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x61, 0x6c, 0x6b, 0x73, 0x22, 0x57, 0x0a, 0x11, 0x54, 0x61,
	0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69,
	0x7a, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x0f, 0x54, 0x61, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x6c, 0x6b, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x22, 0x5e, 0x0a,
	0x0c, 0x54, 0x61, 0x6c, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x12, 0x15, 0x0a,
	0x06, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73,
	0x65, 0x71, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x95, 0x01,
	0x0a, 0x0b, 0x54, 0x61, 0x6c, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x61, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x0b, 0x0a, 0x09, 0x54, 0x61, 0x6c, 0x6b, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x6c, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x61, 0x6c, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x54, 0x61, 0x6c, 0x6b, 0x22,
	0x51, 0x0a, 0x0c, 0x54, 0x61, 0x6c, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x6c, 0x6b, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x61, 0x6c,
	0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x22, 0x3d, 0x0a, 0x14, 0x54, 0x61, 0x6c, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65,
	0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x61,
	0x74, 0x22, 0x26, 0x0a, 0x12, 0x54, 0x61, 0x6c, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xb8, 0x02, 0x0a, 0x0c, 0x54, 0x61,
	0x6c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x6b, 0x69,
	0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54,
	0x61, 0x6c, 0x6b, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x07, 0x6b, 0x69, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x12, 0x2b, 0x0a, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x61, 0x6c,
	0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x54, 0x61, 0x6c, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x06, 0x0a, 0x04,
	0x54, 0x61, 0x6c, 0x6b, 0x22, 0x22, 0x0a, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x54, 0x61, 0x6c, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x21, 0x0a, 0x1f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x18, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x6c, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x6c, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x6c, 0x6b, 0x49, 0x64,
	0x22, 0x56, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x6c, 0x6b, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2f, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x6c, 0x6b, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x14, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x6c, 0x6b, 0x49, 0x64, 0x22, 0xf8, 0x02, 0x0a, 0x0e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a,
	0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x6c, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x54, 0x61, 0x6c, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x54, 0x61, 0x6c, 0x6b, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x6c, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c,
	0x6b, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x61, 0x6c, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x2f, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x74, 0x61, 0x6c, 0x6b, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x74, 0x61, 0x6c, 0x6b, 0x73, 0x22, 0x6e, 0x0a, 0x1a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x61, 0x6c, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x74, 0x61, 0x6c, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x08, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x54, 0x61, 0x6c, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x1c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x54, 0x61, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x61, 0x6c, 0x6b, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61,
	0x6c, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x05, 0x74, 0x61, 0x6c, 0x6b, 0x73, 0x22, 0x6a, 0x0a, 0x19, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x54, 0x61, 0x6c, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x61, 0x6c, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x74, 0x61, 0x6c, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x19, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x63, 0x68, 0x54, 0x61, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x61, 0x6c, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x74, 0x61, 0x6c, 0x6b,
	0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64,
	0x65, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x22, 0x4c, 0x0a, 0x19, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x52,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x04, 0x74, 0x61, 0x6c, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x04, 0x74, 0x61, 0x6c, 0x6b, 0x22, 0x5d,
	0x0a, 0x1a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x6c, 0x6b, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2d, 0x0a,
	0x19, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x40, 0x0a, 0x17,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x61, 0x74, 0x22, 0x2b,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x6c, 0x6b, 0x49, 0x64, 0x22, 0xd0, 0x04, 0x0a, 0x0f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x08, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6b, 0x69, 0x63, 0x6b, 0x4f, 0x75,
	0x74, 0x12, 0x43, 0x0a, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x6c,
	0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x6c, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x6c, 0x6b, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x61, 0x6c, 0x6b, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x54, 0x61, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x61, 0x6c, 0x6b, 0x73, 0x12, 0x34, 0x0a,
	0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x54, 0x61, 0x6c,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x63, 0x68, 0x54, 0x61, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x37, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x47,
	0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x61, 0x6c, 0x6b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13,
	0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x64, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x65, 0x77, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x65, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x31, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x45, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x0c, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x42, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x2a, 0x59, 0x0a, 0x0a, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41, 0x4c, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x4c, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x4c,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10,
	0x02, 0x32, 0x79, 0x0a, 0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x61, 0x6c,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x61, 0x6c, 0x6b, 0x73, 0x12, 0x12, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61,
	0x6c, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x61, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x29, 0x0a, 0x04, 0x54, 0x61, 0x6c, 0x6b, 0x12, 0x0c, 0x2e, 0x54, 0x61, 0x6c, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x32, 0x48, 0x0a, 0x12,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0f, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x32, 0x8b, 0x01, 0x0a, 0x14, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x12,
	0x37, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x13, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x32, 0x73, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x08,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x10, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x28, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x0d, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x57, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x61, 0x74, 0x64, 0x7a, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x42, 0x09, 0x54, 0x61, 0x6c,
	0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x73, 0x2f, 0x74, 0x61,
	0x6c, 0x6b, 0x70, 0x62, 0x2f, 0x74, 0x61, 0x6c, 0x6b, 0x70, 0x62, 0x3b, 0x74, 0x61, 0x6c, 0x6b,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_talk_proto_rawDescOnce sync.Once
	file_proto_talk_proto_rawDescData = file_proto_talk_proto_rawDesc
)

func file_proto_talk_proto_rawDescGZIP() []byte {
	file_proto_talk_proto_rawDescOnce.Do(func() {
		file_proto_talk_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_talk_proto_rawDescData)
	})
	return file_proto_talk_proto_rawDescData
}

var file_proto_talk_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_talk_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_proto_talk_proto_goTypes = []interface{}{
	(TalkStatus)(0),                          // 0: TalkStatus
	(*Empty)(nil),                            // 1: Empty
	(*TalkKickOutMessage)(nil),               // 2: TalkKickOutMessage
	(*QueryTalksRequest)(nil),                // 3: QueryTalksRequest
	(*TalkInfo)(nil),                         // 4: TalkInfo
	(*QueryTalksResponse)(nil),               // 5: QueryTalksResponse
	(*TalkCreateRequest)(nil),                // 6: TalkCreateRequest
	(*TalkOpenRequest)(nil),                  // 7: TalkOpenRequest
	(*TalkMessageW)(nil),                     // 8: TalkMessageW
	(*TalkMessage)(nil),                      // 9: TalkMessage
	(*TalkClose)(nil),                        // 10: TalkClose
	(*TalkRequest)(nil),                      // 11: TalkRequest
	(*TalkMessages)(nil),                     // 12: TalkMessages
	(*TalkMessageConfirmed)(nil),             // 13: TalkMessageConfirmed
	(*TalkNotifyResponse)(nil),               // 14: TalkNotifyResponse
	(*TalkResponse)(nil),                     // 15: TalkResponse
	(*ServiceQueryAttachedTalksRequest)(nil), // 16: ServiceQueryAttachedTalksRequest
	(*ServiceQueryPendingTalksRequest)(nil),  // 17: ServiceQueryPendingTalksRequest
	(*ServiceReloadTalkRequest)(nil),         // 18: ServiceReloadTalkRequest
	(*ServicePostMessage)(nil),               // 19: ServicePostMessage
	(*ServiceAttachRequest)(nil),             // 20: ServiceAttachRequest
	(*ServiceDetachRequest)(nil),             // 21: ServiceDetachRequest
	(*ServiceRequest)(nil),                   // 22: ServiceRequest
	(*ServicePendingTalksResponse)(nil),      // 23: ServicePendingTalksResponse
	(*ServiceTalkInfoAndMessages)(nil),       // 24: ServiceTalkInfoAndMessages
	(*ServiceAttachedTalksResponse)(nil),     // 25: ServiceAttachedTalksResponse
	(*ServiceAttachTalkResponse)(nil),        // 26: ServiceAttachTalkResponse
	(*ServiceDetachTalkResponse)(nil),        // 27: ServiceDetachTalkResponse
	(*ServiceTalkReloadResponse)(nil),        // 28: ServiceTalkReloadResponse
	(*ServiceTalkMessageResponse)(nil),       // 29: ServiceTalkMessageResponse
	(*ServiceTalkNotifyResponse)(nil),        // 30: ServiceTalkNotifyResponse
	(*ServiceMessageConfirmed)(nil),          // 31: ServiceMessageConfirmed
	(*ServiceTalkClose)(nil),                 // 32: ServiceTalkClose
	(*ServiceResponse)(nil),                  // 33: ServiceResponse
	(*CheckTokenRequest)(nil),                // 34: CheckTokenRequest
	(*CheckTokenResponse)(nil),               // 35: CheckTokenResponse
	(*CreateTokenRequest)(nil),               // 36: CreateTokenRequest
	(*CreateTokenResponse)(nil),              // 37: CreateTokenResponse
	(*RegisterRequest)(nil),                  // 38: RegisterRequest
	(*RegisterResponse)(nil),                 // 39: RegisterResponse
	(*LoginRequest)(nil),                     // 40: LoginRequest
	(*LoginResponse)(nil),                    // 41: LoginResponse
}
var file_proto_talk_proto_depIdxs = []int32{
	0,  // 0: QueryTalksRequest.statuses:type_name -> TalkStatus
	0,  // 1: TalkInfo.status:type_name -> TalkStatus
	4,  // 2: QueryTalksResponse.talks:type_name -> TalkInfo
	6,  // 3: TalkRequest.create:type_name -> TalkCreateRequest
	7,  // 4: TalkRequest.open:type_name -> TalkOpenRequest
	8,  // 5: TalkRequest.message:type_name -> TalkMessageW
	10, // 6: TalkRequest.close:type_name -> TalkClose
	9,  // 7: TalkMessages.messages:type_name -> TalkMessage
	2,  // 8: TalkResponse.kick_out:type_name -> TalkKickOutMessage
	12, // 9: TalkResponse.messages:type_name -> TalkMessages
	9,  // 10: TalkResponse.message:type_name -> TalkMessage
	13, // 11: TalkResponse.message_confirmed:type_name -> TalkMessageConfirmed
	10, // 12: TalkResponse.close:type_name -> TalkClose
	14, // 13: TalkResponse.notify:type_name -> TalkNotifyResponse
	8,  // 14: ServicePostMessage.message:type_name -> TalkMessageW
	16, // 15: ServiceRequest.attached_talks:type_name -> ServiceQueryAttachedTalksRequest
	17, // 16: ServiceRequest.pending_talks:type_name -> ServiceQueryPendingTalksRequest
	18, // 17: ServiceRequest.reload:type_name -> ServiceReloadTalkRequest
	19, // 18: ServiceRequest.message:type_name -> ServicePostMessage
	20, // 19: ServiceRequest.attach:type_name -> ServiceAttachRequest
	21, // 20: ServiceRequest.detach:type_name -> ServiceDetachRequest
	4,  // 21: ServicePendingTalksResponse.talks:type_name -> TalkInfo
	4,  // 22: ServiceTalkInfoAndMessages.talk_info:type_name -> TalkInfo
	9,  // 23: ServiceTalkInfoAndMessages.messages:type_name -> TalkMessage
	24, // 24: ServiceAttachedTalksResponse.talks:type_name -> ServiceTalkInfoAndMessages
	4,  // 25: ServiceAttachTalkResponse.talk:type_name -> TalkInfo
	4,  // 26: ServiceDetachTalkResponse.talk:type_name -> TalkInfo
	24, // 27: ServiceTalkReloadResponse.talk:type_name -> ServiceTalkInfoAndMessages
	9,  // 28: ServiceTalkMessageResponse.message:type_name -> TalkMessage
	2,  // 29: ServiceResponse.kick_out:type_name -> TalkKickOutMessage
	23, // 30: ServiceResponse.pending_talks:type_name -> ServicePendingTalksResponse
	25, // 31: ServiceResponse.talks:type_name -> ServiceAttachedTalksResponse
	26, // 32: ServiceResponse.attach:type_name -> ServiceAttachTalkResponse
	27, // 33: ServiceResponse.detach:type_name -> ServiceDetachTalkResponse
	28, // 34: ServiceResponse.reload:type_name -> ServiceTalkReloadResponse
	29, // 35: ServiceResponse.message:type_name -> ServiceTalkMessageResponse
	30, // 36: ServiceResponse.notify:type_name -> ServiceTalkNotifyResponse
	31, // 37: ServiceResponse.message_confirmed:type_name -> ServiceMessageConfirmed
	32, // 38: ServiceResponse.close:type_name -> ServiceTalkClose
	3,  // 39: CustomerTalkService.QueryTalks:input_type -> QueryTalksRequest
	11, // 40: CustomerTalkService.Talk:input_type -> TalkRequest
	22, // 41: ServiceTalkService.Service:input_type -> ServiceRequest
	34, // 42: CustomerUserServicer.CheckToken:input_type -> CheckTokenRequest
	36, // 43: CustomerUserServicer.CreateToken:input_type -> CreateTokenRequest
	38, // 44: ServicerUserServicer.Register:input_type -> RegisterRequest
	40, // 45: ServicerUserServicer.Login:input_type -> LoginRequest
	5,  // 46: CustomerTalkService.QueryTalks:output_type -> QueryTalksResponse
	15, // 47: CustomerTalkService.Talk:output_type -> TalkResponse
	33, // 48: ServiceTalkService.Service:output_type -> ServiceResponse
	35, // 49: CustomerUserServicer.CheckToken:output_type -> CheckTokenResponse
	37, // 50: CustomerUserServicer.CreateToken:output_type -> CreateTokenResponse
	39, // 51: ServicerUserServicer.Register:output_type -> RegisterResponse
	41, // 52: ServicerUserServicer.Login:output_type -> LoginResponse
	46, // [46:53] is the sub-list for method output_type
	39, // [39:46] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_proto_talk_proto_init() }
func file_proto_talk_proto_init() {
	if File_proto_talk_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_talk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalkKickOutMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTalksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTalksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalkCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalkOpenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalkMessageW); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalkMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalkClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalkMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalkMessageConfirmed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalkNotifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceQueryAttachedTalksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceQueryPendingTalksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceReloadTalkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicePostMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceAttachRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceDetachRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicePendingTalksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceTalkInfoAndMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceAttachedTalksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceAttachTalkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceDetachTalkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceTalkReloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceTalkMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceTalkNotifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceMessageConfirmed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceTalkClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_talk_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_talk_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*TalkMessageW_Text)(nil),
		(*TalkMessageW_Image)(nil),
	}
	file_proto_talk_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*TalkMessage_Text)(nil),
		(*TalkMessage_Image)(nil),
	}
	file_proto_talk_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*TalkRequest_Create)(nil),
		(*TalkRequest_Open)(nil),
		(*TalkRequest_Message)(nil),
		(*TalkRequest_Close)(nil),
	}
	file_proto_talk_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*TalkResponse_KickOut)(nil),
		(*TalkResponse_Messages)(nil),
		(*TalkResponse_Message)(nil),
		(*TalkResponse_MessageConfirmed)(nil),
		(*TalkResponse_Close)(nil),
		(*TalkResponse_Notify)(nil),
	}
	file_proto_talk_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*ServiceRequest_AttachedTalks)(nil),
		(*ServiceRequest_PendingTalks)(nil),
		(*ServiceRequest_Reload)(nil),
		(*ServiceRequest_Message)(nil),
		(*ServiceRequest_Attach)(nil),
		(*ServiceRequest_Detach)(nil),
	}
	file_proto_talk_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*ServiceResponse_KickOut)(nil),
		(*ServiceResponse_PendingTalks)(nil),
		(*ServiceResponse_Talks)(nil),
		(*ServiceResponse_Attach)(nil),
		(*ServiceResponse_Detach)(nil),
		(*ServiceResponse_Reload)(nil),
		(*ServiceResponse_Message)(nil),
		(*ServiceResponse_Notify)(nil),
		(*ServiceResponse_MessageConfirmed)(nil),
		(*ServiceResponse_Close)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_talk_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_proto_talk_proto_goTypes,
		DependencyIndexes: file_proto_talk_proto_depIdxs,
		EnumInfos:         file_proto_talk_proto_enumTypes,
		MessageInfos:      file_proto_talk_proto_msgTypes,
	}.Build()
	File_proto_talk_proto = out.File
	file_proto_talk_proto_rawDesc = nil
	file_proto_talk_proto_goTypes = nil
	file_proto_talk_proto_depIdxs = nil
}
