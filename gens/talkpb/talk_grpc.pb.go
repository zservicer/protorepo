// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: proto/talk.proto

package talkpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerTalkServiceClient is the client API for CustomerTalkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerTalkServiceClient interface {
	QueryTalks(ctx context.Context, in *QueryTalksRequest, opts ...grpc.CallOption) (*QueryTalksResponse, error)
	Talk(ctx context.Context, opts ...grpc.CallOption) (CustomerTalkService_TalkClient, error)
}

type customerTalkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerTalkServiceClient(cc grpc.ClientConnInterface) CustomerTalkServiceClient {
	return &customerTalkServiceClient{cc}
}

func (c *customerTalkServiceClient) QueryTalks(ctx context.Context, in *QueryTalksRequest, opts ...grpc.CallOption) (*QueryTalksResponse, error) {
	out := new(QueryTalksResponse)
	err := c.cc.Invoke(ctx, "/CustomerTalkService/QueryTalks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerTalkServiceClient) Talk(ctx context.Context, opts ...grpc.CallOption) (CustomerTalkService_TalkClient, error) {
	stream, err := c.cc.NewStream(ctx, &CustomerTalkService_ServiceDesc.Streams[0], "/CustomerTalkService/Talk", opts...)
	if err != nil {
		return nil, err
	}
	x := &customerTalkServiceTalkClient{stream}
	return x, nil
}

type CustomerTalkService_TalkClient interface {
	Send(*TalkRequest) error
	Recv() (*TalkResponse, error)
	grpc.ClientStream
}

type customerTalkServiceTalkClient struct {
	grpc.ClientStream
}

func (x *customerTalkServiceTalkClient) Send(m *TalkRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *customerTalkServiceTalkClient) Recv() (*TalkResponse, error) {
	m := new(TalkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CustomerTalkServiceServer is the server API for CustomerTalkService service.
// All implementations must embed UnimplementedCustomerTalkServiceServer
// for forward compatibility
type CustomerTalkServiceServer interface {
	QueryTalks(context.Context, *QueryTalksRequest) (*QueryTalksResponse, error)
	Talk(CustomerTalkService_TalkServer) error
	mustEmbedUnimplementedCustomerTalkServiceServer()
}

// UnimplementedCustomerTalkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerTalkServiceServer struct {
}

func (UnimplementedCustomerTalkServiceServer) QueryTalks(context.Context, *QueryTalksRequest) (*QueryTalksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTalks not implemented")
}
func (UnimplementedCustomerTalkServiceServer) Talk(CustomerTalkService_TalkServer) error {
	return status.Errorf(codes.Unimplemented, "method Talk not implemented")
}
func (UnimplementedCustomerTalkServiceServer) mustEmbedUnimplementedCustomerTalkServiceServer() {}

// UnsafeCustomerTalkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerTalkServiceServer will
// result in compilation errors.
type UnsafeCustomerTalkServiceServer interface {
	mustEmbedUnimplementedCustomerTalkServiceServer()
}

func RegisterCustomerTalkServiceServer(s grpc.ServiceRegistrar, srv CustomerTalkServiceServer) {
	s.RegisterService(&CustomerTalkService_ServiceDesc, srv)
}

func _CustomerTalkService_QueryTalks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTalksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerTalkServiceServer).QueryTalks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerTalkService/QueryTalks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerTalkServiceServer).QueryTalks(ctx, req.(*QueryTalksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerTalkService_Talk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CustomerTalkServiceServer).Talk(&customerTalkServiceTalkServer{stream})
}

type CustomerTalkService_TalkServer interface {
	Send(*TalkResponse) error
	Recv() (*TalkRequest, error)
	grpc.ServerStream
}

type customerTalkServiceTalkServer struct {
	grpc.ServerStream
}

func (x *customerTalkServiceTalkServer) Send(m *TalkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *customerTalkServiceTalkServer) Recv() (*TalkRequest, error) {
	m := new(TalkRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CustomerTalkService_ServiceDesc is the grpc.ServiceDesc for CustomerTalkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerTalkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CustomerTalkService",
	HandlerType: (*CustomerTalkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryTalks",
			Handler:    _CustomerTalkService_QueryTalks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Talk",
			Handler:       _CustomerTalkService_Talk_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/talk.proto",
}

// ServiceTalkServiceClient is the client API for ServiceTalkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceTalkServiceClient interface {
	Service(ctx context.Context, opts ...grpc.CallOption) (ServiceTalkService_ServiceClient, error)
}

type serviceTalkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceTalkServiceClient(cc grpc.ClientConnInterface) ServiceTalkServiceClient {
	return &serviceTalkServiceClient{cc}
}

func (c *serviceTalkServiceClient) Service(ctx context.Context, opts ...grpc.CallOption) (ServiceTalkService_ServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceTalkService_ServiceDesc.Streams[0], "/ServiceTalkService/Service", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceTalkServiceServiceClient{stream}
	return x, nil
}

type ServiceTalkService_ServiceClient interface {
	Send(*ServiceRequest) error
	Recv() (*ServiceResponse, error)
	grpc.ClientStream
}

type serviceTalkServiceServiceClient struct {
	grpc.ClientStream
}

func (x *serviceTalkServiceServiceClient) Send(m *ServiceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceTalkServiceServiceClient) Recv() (*ServiceResponse, error) {
	m := new(ServiceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceTalkServiceServer is the server API for ServiceTalkService service.
// All implementations must embed UnimplementedServiceTalkServiceServer
// for forward compatibility
type ServiceTalkServiceServer interface {
	Service(ServiceTalkService_ServiceServer) error
	mustEmbedUnimplementedServiceTalkServiceServer()
}

// UnimplementedServiceTalkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceTalkServiceServer struct {
}

func (UnimplementedServiceTalkServiceServer) Service(ServiceTalkService_ServiceServer) error {
	return status.Errorf(codes.Unimplemented, "method Service not implemented")
}
func (UnimplementedServiceTalkServiceServer) mustEmbedUnimplementedServiceTalkServiceServer() {}

// UnsafeServiceTalkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceTalkServiceServer will
// result in compilation errors.
type UnsafeServiceTalkServiceServer interface {
	mustEmbedUnimplementedServiceTalkServiceServer()
}

func RegisterServiceTalkServiceServer(s grpc.ServiceRegistrar, srv ServiceTalkServiceServer) {
	s.RegisterService(&ServiceTalkService_ServiceDesc, srv)
}

func _ServiceTalkService_Service_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceTalkServiceServer).Service(&serviceTalkServiceServiceServer{stream})
}

type ServiceTalkService_ServiceServer interface {
	Send(*ServiceResponse) error
	Recv() (*ServiceRequest, error)
	grpc.ServerStream
}

type serviceTalkServiceServiceServer struct {
	grpc.ServerStream
}

func (x *serviceTalkServiceServiceServer) Send(m *ServiceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceTalkServiceServiceServer) Recv() (*ServiceRequest, error) {
	m := new(ServiceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceTalkService_ServiceDesc is the grpc.ServiceDesc for ServiceTalkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceTalkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServiceTalkService",
	HandlerType: (*ServiceTalkServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Service",
			Handler:       _ServiceTalkService_Service_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/talk.proto",
}

// CustomerUserServicerClient is the client API for CustomerUserServicer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerUserServicerClient interface {
	CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenResponse, error)
	CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenResponse, error)
}

type customerUserServicerClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerUserServicerClient(cc grpc.ClientConnInterface) CustomerUserServicerClient {
	return &customerUserServicerClient{cc}
}

func (c *customerUserServicerClient) CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenResponse, error) {
	out := new(CheckTokenResponse)
	err := c.cc.Invoke(ctx, "/CustomerUserServicer/CheckToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerUserServicerClient) CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenResponse, error) {
	out := new(CreateTokenResponse)
	err := c.cc.Invoke(ctx, "/CustomerUserServicer/CreateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerUserServicerServer is the server API for CustomerUserServicer service.
// All implementations must embed UnimplementedCustomerUserServicerServer
// for forward compatibility
type CustomerUserServicerServer interface {
	CheckToken(context.Context, *CheckTokenRequest) (*CheckTokenResponse, error)
	CreateToken(context.Context, *CreateTokenRequest) (*CreateTokenResponse, error)
	mustEmbedUnimplementedCustomerUserServicerServer()
}

// UnimplementedCustomerUserServicerServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerUserServicerServer struct {
}

func (UnimplementedCustomerUserServicerServer) CheckToken(context.Context, *CheckTokenRequest) (*CheckTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckToken not implemented")
}
func (UnimplementedCustomerUserServicerServer) CreateToken(context.Context, *CreateTokenRequest) (*CreateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedCustomerUserServicerServer) mustEmbedUnimplementedCustomerUserServicerServer() {}

// UnsafeCustomerUserServicerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerUserServicerServer will
// result in compilation errors.
type UnsafeCustomerUserServicerServer interface {
	mustEmbedUnimplementedCustomerUserServicerServer()
}

func RegisterCustomerUserServicerServer(s grpc.ServiceRegistrar, srv CustomerUserServicerServer) {
	s.RegisterService(&CustomerUserServicer_ServiceDesc, srv)
}

func _CustomerUserServicer_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerUserServicerServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerUserServicer/CheckToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerUserServicerServer).CheckToken(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerUserServicer_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerUserServicerServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CustomerUserServicer/CreateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerUserServicerServer).CreateToken(ctx, req.(*CreateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerUserServicer_ServiceDesc is the grpc.ServiceDesc for CustomerUserServicer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerUserServicer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CustomerUserServicer",
	HandlerType: (*CustomerUserServicerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckToken",
			Handler:    _CustomerUserServicer_CheckToken_Handler,
		},
		{
			MethodName: "CreateToken",
			Handler:    _CustomerUserServicer_CreateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/talk.proto",
}

// ServicerUserServicerClient is the client API for ServicerUserServicer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicerUserServicerClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Profile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	SetPermissions(ctx context.Context, in *SetPermissionsRequest, opts ...grpc.CallOption) (*Empty, error)
}

type servicerUserServicerClient struct {
	cc grpc.ClientConnInterface
}

func NewServicerUserServicerClient(cc grpc.ClientConnInterface) ServicerUserServicerClient {
	return &servicerUserServicerClient{cc}
}

func (c *servicerUserServicerClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/ServicerUserServicer/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicerUserServicerClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/ServicerUserServicer/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicerUserServicerClient) Profile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, "/ServicerUserServicer/Profile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicerUserServicerClient) SetPermissions(ctx context.Context, in *SetPermissionsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ServicerUserServicer/SetPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicerUserServicerServer is the server API for ServicerUserServicer service.
// All implementations must embed UnimplementedServicerUserServicerServer
// for forward compatibility
type ServicerUserServicerServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Profile(context.Context, *ProfileRequest) (*ProfileResponse, error)
	SetPermissions(context.Context, *SetPermissionsRequest) (*Empty, error)
	mustEmbedUnimplementedServicerUserServicerServer()
}

// UnimplementedServicerUserServicerServer must be embedded to have forward compatible implementations.
type UnimplementedServicerUserServicerServer struct {
}

func (UnimplementedServicerUserServicerServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedServicerUserServicerServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedServicerUserServicerServer) Profile(context.Context, *ProfileRequest) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Profile not implemented")
}
func (UnimplementedServicerUserServicerServer) SetPermissions(context.Context, *SetPermissionsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPermissions not implemented")
}
func (UnimplementedServicerUserServicerServer) mustEmbedUnimplementedServicerUserServicerServer() {}

// UnsafeServicerUserServicerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicerUserServicerServer will
// result in compilation errors.
type UnsafeServicerUserServicerServer interface {
	mustEmbedUnimplementedServicerUserServicerServer()
}

func RegisterServicerUserServicerServer(s grpc.ServiceRegistrar, srv ServicerUserServicerServer) {
	s.RegisterService(&ServicerUserServicer_ServiceDesc, srv)
}

func _ServicerUserServicer_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicerUserServicerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServicerUserServicer/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicerUserServicerServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicerUserServicer_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicerUserServicerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServicerUserServicer/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicerUserServicerServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicerUserServicer_Profile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicerUserServicerServer).Profile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServicerUserServicer/Profile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicerUserServicerServer).Profile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicerUserServicer_SetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicerUserServicerServer).SetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServicerUserServicer/SetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicerUserServicerServer).SetPermissions(ctx, req.(*SetPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServicerUserServicer_ServiceDesc is the grpc.ServiceDesc for ServicerUserServicer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicerUserServicer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServicerUserServicer",
	HandlerType: (*ServicerUserServicerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ServicerUserServicer_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ServicerUserServicer_Login_Handler,
		},
		{
			MethodName: "Profile",
			Handler:    _ServicerUserServicer_Profile_Handler,
		},
		{
			MethodName: "SetPermissions",
			Handler:    _ServicerUserServicer_SetPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/talk.proto",
}
